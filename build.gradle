buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = "org.lolhens" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Minechanics2"
ext.FMLCorePlugin = "org.lolhens.minechanics.MinechanicsCorePlugin"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    assetDir = "run/assets"
	
	replaceIn "reference/Reference.java"
	replace '@VERSION@', project.version
    replace '@MC_VERSION@', project.minecraft.version
}

configurations {
	extractIntoJar
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

	compile project('EventManager')
	extractIntoJar project('EventManager')
}

jar {
	manifest {
		attributes 'FMLCorePlugin':project.FMLCorePlugin
	}
	from configurations.extractIntoJar.collect { it.isDirectory() ? it : zipTree(it) }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
	classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

build.dependsOn sourceJar, javadocJar, deobfJar

artifacts {
    // the default jar is already here by default
    archives sourceJar
    archives javadocJar
    archives deobfJar
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'misc'
    }
}